'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="LibDB")>  _
Partial Public Class LibDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAdminLib(instance As AdminLib)
    End Sub
  Partial Private Sub UpdateAdminLib(instance As AdminLib)
    End Sub
  Partial Private Sub DeleteAdminLib(instance As AdminLib)
    End Sub
  Partial Private Sub InsertRoomBooking(instance As RoomBooking)
    End Sub
  Partial Private Sub UpdateRoomBooking(instance As RoomBooking)
    End Sub
  Partial Private Sub DeleteRoomBooking(instance As RoomBooking)
    End Sub
  Partial Private Sub InsertBook(instance As Book)
    End Sub
  Partial Private Sub UpdateBook(instance As Book)
    End Sub
  Partial Private Sub DeleteBook(instance As Book)
    End Sub
  Partial Private Sub InsertCheckOut(instance As CheckOut)
    End Sub
  Partial Private Sub UpdateCheckOut(instance As CheckOut)
    End Sub
  Partial Private Sub DeleteCheckOut(instance As CheckOut)
    End Sub
  Partial Private Sub InsertCopy(instance As Copy)
    End Sub
  Partial Private Sub UpdateCopy(instance As Copy)
    End Sub
  Partial Private Sub DeleteCopy(instance As Copy)
    End Sub
  Partial Private Sub InsertPatron(instance As Patron)
    End Sub
  Partial Private Sub UpdatePatron(instance As Patron)
    End Sub
  Partial Private Sub DeletePatron(instance As Patron)
    End Sub
  Partial Private Sub InsertReturn(instance As [Return])
    End Sub
  Partial Private Sub UpdateReturn(instance As [Return])
    End Sub
  Partial Private Sub DeleteReturn(instance As [Return])
    End Sub
  Partial Private Sub InsertRoom(instance As Room)
    End Sub
  Partial Private Sub UpdateRoom(instance As Room)
    End Sub
  Partial Private Sub DeleteRoom(instance As Room)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.BAIT1083_Visual_Programming.My.MySettings.Default.LibDBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AdminLibs() As System.Data.Linq.Table(Of AdminLib)
		Get
			Return Me.GetTable(Of AdminLib)
		End Get
	End Property
	
	Public ReadOnly Property RoomBookings() As System.Data.Linq.Table(Of RoomBooking)
		Get
			Return Me.GetTable(Of RoomBooking)
		End Get
	End Property
	
	Public ReadOnly Property Books() As System.Data.Linq.Table(Of Book)
		Get
			Return Me.GetTable(Of Book)
		End Get
	End Property
	
	Public ReadOnly Property CheckOuts() As System.Data.Linq.Table(Of CheckOut)
		Get
			Return Me.GetTable(Of CheckOut)
		End Get
	End Property
	
	Public ReadOnly Property Copies() As System.Data.Linq.Table(Of Copy)
		Get
			Return Me.GetTable(Of Copy)
		End Get
	End Property
	
	Public ReadOnly Property Patrons() As System.Data.Linq.Table(Of Patron)
		Get
			Return Me.GetTable(Of Patron)
		End Get
	End Property
	
	Public ReadOnly Property Returns() As System.Data.Linq.Table(Of [Return])
		Get
			Return Me.GetTable(Of [Return])
		End Get
	End Property
	
	Public ReadOnly Property Rooms() As System.Data.Linq.Table(Of Room)
		Get
			Return Me.GetTable(Of Room)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AdminLib")>  _
Partial Public Class AdminLib
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Password As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RoomBooking")>  _
Partial Public Class RoomBooking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Patron_ID As Integer
	
	Private _Room_ID As Integer
	
	Private _Date_Time As Date
	
	Private _CheckIn_Date As System.Nullable(Of Date)
	
	Private _CheckOut_Date As System.Nullable(Of Date)
	
	Private _Patron As EntityRef(Of Patron)
	
	Private _Room As EntityRef(Of Room)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPatron_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPatron_IDChanged()
    End Sub
    Partial Private Sub OnRoom_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoom_IDChanged()
    End Sub
    Partial Private Sub OnDate_TimeChanging(value As Date)
    End Sub
    Partial Private Sub OnDate_TimeChanged()
    End Sub
    Partial Private Sub OnCheckIn_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCheckIn_DateChanged()
    End Sub
    Partial Private Sub OnCheckOut_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCheckOut_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Patron = CType(Nothing, EntityRef(Of Patron))
		Me._Room = CType(Nothing, EntityRef(Of Room))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Patron_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Patron_ID() As Integer
		Get
			Return Me._Patron_ID
		End Get
		Set
			If ((Me._Patron_ID = value)  _
						= false) Then
				If Me._Patron.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPatron_IDChanging(value)
				Me.SendPropertyChanging
				Me._Patron_ID = value
				Me.SendPropertyChanged("Patron_ID")
				Me.OnPatron_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Room_ID() As Integer
		Get
			Return Me._Room_ID
		End Get
		Set
			If ((Me._Room_ID = value)  _
						= false) Then
				If Me._Room.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoom_IDChanging(value)
				Me.SendPropertyChanging
				Me._Room_ID = value
				Me.SendPropertyChanged("Room_ID")
				Me.OnRoom_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date_Time", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Date_Time() As Date
		Get
			Return Me._Date_Time
		End Get
		Set
			If ((Me._Date_Time = value)  _
						= false) Then
				Me.OnDate_TimeChanging(value)
				Me.SendPropertyChanging
				Me._Date_Time = value
				Me.SendPropertyChanged("Date_Time")
				Me.OnDate_TimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckIn_Date", DbType:="DateTime")>  _
	Public Property CheckIn_Date() As System.Nullable(Of Date)
		Get
			Return Me._CheckIn_Date
		End Get
		Set
			If (Me._CheckIn_Date.Equals(value) = false) Then
				Me.OnCheckIn_DateChanging(value)
				Me.SendPropertyChanging
				Me._CheckIn_Date = value
				Me.SendPropertyChanged("CheckIn_Date")
				Me.OnCheckIn_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckOut_Date", DbType:="DateTime")>  _
	Public Property CheckOut_Date() As System.Nullable(Of Date)
		Get
			Return Me._CheckOut_Date
		End Get
		Set
			If (Me._CheckOut_Date.Equals(value) = false) Then
				Me.OnCheckOut_DateChanging(value)
				Me.SendPropertyChanging
				Me._CheckOut_Date = value
				Me.SendPropertyChanged("CheckOut_Date")
				Me.OnCheckOut_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patron_RoomBooking", Storage:="_Patron", ThisKey:="Patron_ID", OtherKey:="Patron_ID", IsForeignKey:=true)>  _
	Public Property Patron() As Patron
		Get
			Return Me._Patron.Entity
		End Get
		Set
			Dim previousValue As Patron = Me._Patron.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Patron.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Patron.Entity = Nothing
					previousValue.RoomBookings.Remove(Me)
				End If
				Me._Patron.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RoomBookings.Add(Me)
					Me._Patron_ID = value.Patron_ID
				Else
					Me._Patron_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Patron")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_RoomBooking", Storage:="_Room", ThisKey:="Room_ID", OtherKey:="Room_Id", IsForeignKey:=true)>  _
	Public Property Room() As Room
		Get
			Return Me._Room.Entity
		End Get
		Set
			Dim previousValue As Room = Me._Room.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Room.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Room.Entity = Nothing
					previousValue.RoomBookings.Remove(Me)
				End If
				Me._Room.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RoomBookings.Add(Me)
					Me._Room_ID = value.Room_Id
				Else
					Me._Room_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Room")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Book")>  _
Partial Public Class Book
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Book_Id As Integer
	
	Private _Book_title As String
	
	Private _Author As String
	
	Private _Category As String
	
	Private _Publication As String
	
	Private _Year_Publish As System.Nullable(Of Date)
	
	Private _Copies As System.Nullable(Of Integer)
	
	Private _Call_no As String
	
	Private _Barcode As String
	
	Private _Copies1 As EntitySet(Of Copy)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBook_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBook_IdChanged()
    End Sub
    Partial Private Sub OnBook_titleChanging(value As String)
    End Sub
    Partial Private Sub OnBook_titleChanged()
    End Sub
    Partial Private Sub OnAuthorChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    Partial Private Sub OnPublicationChanging(value As String)
    End Sub
    Partial Private Sub OnPublicationChanged()
    End Sub
    Partial Private Sub OnYear_PublishChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnYear_PublishChanged()
    End Sub
    Partial Private Sub OnCopiesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCopiesChanged()
    End Sub
    Partial Private Sub OnCall_noChanging(value As String)
    End Sub
    Partial Private Sub OnCall_noChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As String)
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Copies1 = New EntitySet(Of Copy)(AddressOf Me.attach_Copies1, AddressOf Me.detach_Copies1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Book_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Book_Id() As Integer
		Get
			Return Me._Book_Id
		End Get
		Set
			If ((Me._Book_Id = value)  _
						= false) Then
				Me.OnBook_IdChanging(value)
				Me.SendPropertyChanging
				Me._Book_Id = value
				Me.SendPropertyChanged("Book_Id")
				Me.OnBook_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Book_title", DbType:="VarChar(MAX)")>  _
	Public Property Book_title() As String
		Get
			Return Me._Book_title
		End Get
		Set
			If (String.Equals(Me._Book_title, value) = false) Then
				Me.OnBook_titleChanging(value)
				Me.SendPropertyChanging
				Me._Book_title = value
				Me.SendPropertyChanged("Book_title")
				Me.OnBook_titleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Author", DbType:="VarChar(MAX)")>  _
	Public Property Author() As String
		Get
			Return Me._Author
		End Get
		Set
			If (String.Equals(Me._Author, value) = false) Then
				Me.OnAuthorChanging(value)
				Me.SendPropertyChanging
				Me._Author = value
				Me.SendPropertyChanged("Author")
				Me.OnAuthorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="VarChar(MAX)")>  _
	Public Property Category() As String
		Get
			Return Me._Category
		End Get
		Set
			If (String.Equals(Me._Category, value) = false) Then
				Me.OnCategoryChanging(value)
				Me.SendPropertyChanging
				Me._Category = value
				Me.SendPropertyChanged("Category")
				Me.OnCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Publication", DbType:="VarChar(MAX)")>  _
	Public Property Publication() As String
		Get
			Return Me._Publication
		End Get
		Set
			If (String.Equals(Me._Publication, value) = false) Then
				Me.OnPublicationChanging(value)
				Me.SendPropertyChanging
				Me._Publication = value
				Me.SendPropertyChanged("Publication")
				Me.OnPublicationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year_Publish", DbType:="DateTime")>  _
	Public Property Year_Publish() As System.Nullable(Of Date)
		Get
			Return Me._Year_Publish
		End Get
		Set
			If (Me._Year_Publish.Equals(value) = false) Then
				Me.OnYear_PublishChanging(value)
				Me.SendPropertyChanging
				Me._Year_Publish = value
				Me.SendPropertyChanged("Year_Publish")
				Me.OnYear_PublishChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Copies", DbType:="Int")>  _
	Public Property Copies() As System.Nullable(Of Integer)
		Get
			Return Me._Copies
		End Get
		Set
			If (Me._Copies.Equals(value) = false) Then
				Me.OnCopiesChanging(value)
				Me.SendPropertyChanging
				Me._Copies = value
				Me.SendPropertyChanged("Copies")
				Me.OnCopiesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Call_no", DbType:="VarChar(MAX)")>  _
	Public Property Call_no() As String
		Get
			Return Me._Call_no
		End Get
		Set
			If (String.Equals(Me._Call_no, value) = false) Then
				Me.OnCall_noChanging(value)
				Me.SendPropertyChanging
				Me._Call_no = value
				Me.SendPropertyChanged("Call_no")
				Me.OnCall_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="VarChar(MAX)")>  _
	Public Property Barcode() As String
		Get
			Return Me._Barcode
		End Get
		Set
			If (String.Equals(Me._Barcode, value) = false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_Copy", Storage:="_Copies1", ThisKey:="Book_Id", OtherKey:="Book_ID")>  _
	Public Property Copies1() As EntitySet(Of Copy)
		Get
			Return Me._Copies1
		End Get
		Set
			Me._Copies1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Copies1(ByVal entity As Copy)
		Me.SendPropertyChanging
		entity.Book = Me
	End Sub
	
	Private Sub detach_Copies1(ByVal entity As Copy)
		Me.SendPropertyChanging
		entity.Book = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CheckOut")>  _
Partial Public Class CheckOut
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Chk_ID As Integer
	
	Private _Patron_ID As Integer
	
	Private _Copy_ID As Integer
	
	Private _Issue_Date As Date
	
	Private _Due_Date As Date
	
	Private _Returns As EntitySet(Of [Return])
	
	Private _Copy As EntityRef(Of Copy)
	
	Private _Patron As EntityRef(Of Patron)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnChk_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnChk_IDChanged()
    End Sub
    Partial Private Sub OnPatron_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPatron_IDChanged()
    End Sub
    Partial Private Sub OnCopy_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCopy_IDChanged()
    End Sub
    Partial Private Sub OnIssue_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnIssue_DateChanged()
    End Sub
    Partial Private Sub OnDue_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnDue_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Returns = New EntitySet(Of [Return])(AddressOf Me.attach_Returns, AddressOf Me.detach_Returns)
		Me._Copy = CType(Nothing, EntityRef(Of Copy))
		Me._Patron = CType(Nothing, EntityRef(Of Patron))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Chk_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Chk_ID() As Integer
		Get
			Return Me._Chk_ID
		End Get
		Set
			If ((Me._Chk_ID = value)  _
						= false) Then
				Me.OnChk_IDChanging(value)
				Me.SendPropertyChanging
				Me._Chk_ID = value
				Me.SendPropertyChanged("Chk_ID")
				Me.OnChk_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Patron_ID", DbType:="Int NOT NULL")>  _
	Public Property Patron_ID() As Integer
		Get
			Return Me._Patron_ID
		End Get
		Set
			If ((Me._Patron_ID = value)  _
						= false) Then
				If Me._Patron.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPatron_IDChanging(value)
				Me.SendPropertyChanging
				Me._Patron_ID = value
				Me.SendPropertyChanged("Patron_ID")
				Me.OnPatron_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Copy_ID", DbType:="Int NOT NULL")>  _
	Public Property Copy_ID() As Integer
		Get
			Return Me._Copy_ID
		End Get
		Set
			If ((Me._Copy_ID = value)  _
						= false) Then
				If Me._Copy.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCopy_IDChanging(value)
				Me.SendPropertyChanging
				Me._Copy_ID = value
				Me.SendPropertyChanged("Copy_ID")
				Me.OnCopy_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Issue_Date", DbType:="DateTime NOT NULL")>  _
	Public Property Issue_Date() As Date
		Get
			Return Me._Issue_Date
		End Get
		Set
			If ((Me._Issue_Date = value)  _
						= false) Then
				Me.OnIssue_DateChanging(value)
				Me.SendPropertyChanging
				Me._Issue_Date = value
				Me.SendPropertyChanged("Issue_Date")
				Me.OnIssue_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Due_Date", DbType:="DateTime NOT NULL")>  _
	Public Property Due_Date() As Date
		Get
			Return Me._Due_Date
		End Get
		Set
			If ((Me._Due_Date = value)  _
						= false) Then
				Me.OnDue_DateChanging(value)
				Me.SendPropertyChanging
				Me._Due_Date = value
				Me.SendPropertyChanged("Due_Date")
				Me.OnDue_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CheckOut_Return", Storage:="_Returns", ThisKey:="Chk_ID", OtherKey:="Chk_ID")>  _
	Public Property Returns() As EntitySet(Of [Return])
		Get
			Return Me._Returns
		End Get
		Set
			Me._Returns.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Copy_CheckOut", Storage:="_Copy", ThisKey:="Copy_ID", OtherKey:="Copy_ID", IsForeignKey:=true)>  _
	Public Property Copy() As Copy
		Get
			Return Me._Copy.Entity
		End Get
		Set
			Dim previousValue As Copy = Me._Copy.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Copy.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Copy.Entity = Nothing
					previousValue.CheckOuts.Remove(Me)
				End If
				Me._Copy.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CheckOuts.Add(Me)
					Me._Copy_ID = value.Copy_ID
				Else
					Me._Copy_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Copy")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patron_CheckOut", Storage:="_Patron", ThisKey:="Patron_ID", OtherKey:="Patron_ID", IsForeignKey:=true)>  _
	Public Property Patron() As Patron
		Get
			Return Me._Patron.Entity
		End Get
		Set
			Dim previousValue As Patron = Me._Patron.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Patron.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Patron.Entity = Nothing
					previousValue.CheckOuts.Remove(Me)
				End If
				Me._Patron.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CheckOuts.Add(Me)
					Me._Patron_ID = value.Patron_ID
				Else
					Me._Patron_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Patron")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Returns(ByVal entity As [Return])
		Me.SendPropertyChanging
		entity.CheckOut = Me
	End Sub
	
	Private Sub detach_Returns(ByVal entity As [Return])
		Me.SendPropertyChanging
		entity.CheckOut = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Copies")>  _
Partial Public Class Copy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Copy_ID As Integer
	
	Private _Book_ID As Integer
	
	Private _Status As String
	
	Private _Barcode As System.Nullable(Of Integer)
	
	Private _CheckOuts As EntitySet(Of CheckOut)
	
	Private _Book As EntityRef(Of Book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCopy_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCopy_IDChanged()
    End Sub
    Partial Private Sub OnBook_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBook_IDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CheckOuts = New EntitySet(Of CheckOut)(AddressOf Me.attach_CheckOuts, AddressOf Me.detach_CheckOuts)
		Me._Book = CType(Nothing, EntityRef(Of Book))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Copy_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Copy_ID() As Integer
		Get
			Return Me._Copy_ID
		End Get
		Set
			If ((Me._Copy_ID = value)  _
						= false) Then
				Me.OnCopy_IDChanging(value)
				Me.SendPropertyChanging
				Me._Copy_ID = value
				Me.SendPropertyChanged("Copy_ID")
				Me.OnCopy_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Book_ID", DbType:="Int NOT NULL")>  _
	Public Property Book_ID() As Integer
		Get
			Return Me._Book_ID
		End Get
		Set
			If ((Me._Book_ID = value)  _
						= false) Then
				If Me._Book.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBook_IDChanging(value)
				Me.SendPropertyChanging
				Me._Book_ID = value
				Me.SendPropertyChanged("Book_ID")
				Me.OnBook_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="Int")>  _
	Public Property Barcode() As System.Nullable(Of Integer)
		Get
			Return Me._Barcode
		End Get
		Set
			If (Me._Barcode.Equals(value) = false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Copy_CheckOut", Storage:="_CheckOuts", ThisKey:="Copy_ID", OtherKey:="Copy_ID")>  _
	Public Property CheckOuts() As EntitySet(Of CheckOut)
		Get
			Return Me._CheckOuts
		End Get
		Set
			Me._CheckOuts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_Copy", Storage:="_Book", ThisKey:="Book_ID", OtherKey:="Book_Id", IsForeignKey:=true)>  _
	Public Property Book() As Book
		Get
			Return Me._Book.Entity
		End Get
		Set
			Dim previousValue As Book = Me._Book.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Book.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Book.Entity = Nothing
					previousValue.Copies1.Remove(Me)
				End If
				Me._Book.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Copies1.Add(Me)
					Me._Book_ID = value.Book_Id
				Else
					Me._Book_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Book")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CheckOuts(ByVal entity As CheckOut)
		Me.SendPropertyChanging
		entity.Copy = Me
	End Sub
	
	Private Sub detach_CheckOuts(ByVal entity As CheckOut)
		Me.SendPropertyChanging
		entity.Copy = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Patron")>  _
Partial Public Class Patron
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Patron_ID As Integer
	
	Private _Name As String
	
	Private _Course As String
	
	Private _PhoneNo As String
	
	Private _Address As String
	
	Private _Email As String
	
	Private _RoomBookings As EntitySet(Of RoomBooking)
	
	Private _CheckOuts As EntitySet(Of CheckOut)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPatron_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPatron_IDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnCourseChanging(value As String)
    End Sub
    Partial Private Sub OnCourseChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RoomBookings = New EntitySet(Of RoomBooking)(AddressOf Me.attach_RoomBookings, AddressOf Me.detach_RoomBookings)
		Me._CheckOuts = New EntitySet(Of CheckOut)(AddressOf Me.attach_CheckOuts, AddressOf Me.detach_CheckOuts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Patron_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Patron_ID() As Integer
		Get
			Return Me._Patron_ID
		End Get
		Set
			If ((Me._Patron_ID = value)  _
						= false) Then
				Me.OnPatron_IDChanging(value)
				Me.SendPropertyChanging
				Me._Patron_ID = value
				Me.SendPropertyChanged("Patron_ID")
				Me.OnPatron_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Course", DbType:="VarChar(MAX)")>  _
	Public Property Course() As String
		Get
			Return Me._Course
		End Get
		Set
			If (String.Equals(Me._Course, value) = false) Then
				Me.OnCourseChanging(value)
				Me.SendPropertyChanging
				Me._Course = value
				Me.SendPropertyChanged("Course")
				Me.OnCourseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="VarChar(50)")>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patron_RoomBooking", Storage:="_RoomBookings", ThisKey:="Patron_ID", OtherKey:="Patron_ID")>  _
	Public Property RoomBookings() As EntitySet(Of RoomBooking)
		Get
			Return Me._RoomBookings
		End Get
		Set
			Me._RoomBookings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patron_CheckOut", Storage:="_CheckOuts", ThisKey:="Patron_ID", OtherKey:="Patron_ID")>  _
	Public Property CheckOuts() As EntitySet(Of CheckOut)
		Get
			Return Me._CheckOuts
		End Get
		Set
			Me._CheckOuts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RoomBookings(ByVal entity As RoomBooking)
		Me.SendPropertyChanging
		entity.Patron = Me
	End Sub
	
	Private Sub detach_RoomBookings(ByVal entity As RoomBooking)
		Me.SendPropertyChanging
		entity.Patron = Nothing
	End Sub
	
	Private Sub attach_CheckOuts(ByVal entity As CheckOut)
		Me.SendPropertyChanging
		entity.Patron = Me
	End Sub
	
	Private Sub detach_CheckOuts(ByVal entity As CheckOut)
		Me.SendPropertyChanging
		entity.Patron = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Return]")>  _
Partial Public Class [Return]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Rtn_ID As Integer
	
	Private _Rtn_Date As System.Nullable(Of Date)
	
	Private _Fine_Amount As System.Nullable(Of Decimal)
	
	Private _Chk_ID As Integer
	
	Private _CheckOut As EntityRef(Of CheckOut)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRtn_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRtn_IDChanged()
    End Sub
    Partial Private Sub OnRtn_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRtn_DateChanged()
    End Sub
    Partial Private Sub OnFine_AmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFine_AmountChanged()
    End Sub
    Partial Private Sub OnChk_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnChk_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CheckOut = CType(Nothing, EntityRef(Of CheckOut))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rtn_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Rtn_ID() As Integer
		Get
			Return Me._Rtn_ID
		End Get
		Set
			If ((Me._Rtn_ID = value)  _
						= false) Then
				Me.OnRtn_IDChanging(value)
				Me.SendPropertyChanging
				Me._Rtn_ID = value
				Me.SendPropertyChanged("Rtn_ID")
				Me.OnRtn_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rtn_Date", DbType:="Date")>  _
	Public Property Rtn_Date() As System.Nullable(Of Date)
		Get
			Return Me._Rtn_Date
		End Get
		Set
			If (Me._Rtn_Date.Equals(value) = false) Then
				Me.OnRtn_DateChanging(value)
				Me.SendPropertyChanging
				Me._Rtn_Date = value
				Me.SendPropertyChanged("Rtn_Date")
				Me.OnRtn_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fine_Amount", DbType:="SmallMoney")>  _
	Public Property Fine_Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Fine_Amount
		End Get
		Set
			If (Me._Fine_Amount.Equals(value) = false) Then
				Me.OnFine_AmountChanging(value)
				Me.SendPropertyChanging
				Me._Fine_Amount = value
				Me.SendPropertyChanged("Fine_Amount")
				Me.OnFine_AmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Chk_ID", DbType:="Int NOT NULL")>  _
	Public Property Chk_ID() As Integer
		Get
			Return Me._Chk_ID
		End Get
		Set
			If ((Me._Chk_ID = value)  _
						= false) Then
				If Me._CheckOut.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChk_IDChanging(value)
				Me.SendPropertyChanging
				Me._Chk_ID = value
				Me.SendPropertyChanged("Chk_ID")
				Me.OnChk_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CheckOut_Return", Storage:="_CheckOut", ThisKey:="Chk_ID", OtherKey:="Chk_ID", IsForeignKey:=true)>  _
	Public Property CheckOut() As CheckOut
		Get
			Return Me._CheckOut.Entity
		End Get
		Set
			Dim previousValue As CheckOut = Me._CheckOut.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CheckOut.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CheckOut.Entity = Nothing
					previousValue.Returns.Remove(Me)
				End If
				Me._CheckOut.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Returns.Add(Me)
					Me._Chk_ID = value.Chk_ID
				Else
					Me._Chk_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CheckOut")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Room")>  _
Partial Public Class Room
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Room_Id As Integer
	
	Private _Size As System.Nullable(Of Integer)
	
	Private _RoomBookings As EntitySet(Of RoomBooking)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRoom_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoom_IdChanged()
    End Sub
    Partial Private Sub OnSizeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSizeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RoomBookings = New EntitySet(Of RoomBooking)(AddressOf Me.attach_RoomBookings, AddressOf Me.detach_RoomBookings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Room_Id() As Integer
		Get
			Return Me._Room_Id
		End Get
		Set
			If ((Me._Room_Id = value)  _
						= false) Then
				Me.OnRoom_IdChanging(value)
				Me.SendPropertyChanging
				Me._Room_Id = value
				Me.SendPropertyChanged("Room_Id")
				Me.OnRoom_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Size", DbType:="Int")>  _
	Public Property Size() As System.Nullable(Of Integer)
		Get
			Return Me._Size
		End Get
		Set
			If (Me._Size.Equals(value) = false) Then
				Me.OnSizeChanging(value)
				Me.SendPropertyChanging
				Me._Size = value
				Me.SendPropertyChanged("Size")
				Me.OnSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_RoomBooking", Storage:="_RoomBookings", ThisKey:="Room_Id", OtherKey:="Room_ID")>  _
	Public Property RoomBookings() As EntitySet(Of RoomBooking)
		Get
			Return Me._RoomBookings
		End Get
		Set
			Me._RoomBookings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RoomBookings(ByVal entity As RoomBooking)
		Me.SendPropertyChanging
		entity.Room = Me
	End Sub
	
	Private Sub detach_RoomBookings(ByVal entity As RoomBooking)
		Me.SendPropertyChanging
		entity.Room = Nothing
	End Sub
End Class
